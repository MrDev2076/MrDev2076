<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sentinal_Eye App</title>
  <link rel="icon" href="https://img.freepik.com/premium-vector/pin-car-parking-logo-template-premium-vector_316488-5081.jpg" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script async src="https://docs.opencv.org/4.x/opencv.js" onload="onOpenCVLoaded()"></script>
</head>
<body class="bg-gray-900 text-white">

  <!-- Navbar -->
  <nav class="bg-gray-600 p-4 shadow-md">
    <div class="max-w-screen-xl px-16 mx-auto flex justify-between items-center">
      <h1 class="text-white text-2xl font-semibold"><a href="/" class="text-white">Sentinal_Eye app</a></h1>
      <div class="flex space-x-4">
        <a href="/profile" class="text-white text-sm  bg-gray-400 duration-300 ease-in-out hover:bg-orange-500 px-4 py-2 rounded">Profile</a>
        <% if (user && user.role !== 'user') { %>  
          <a href="/admin" class="text-white text-sm  bg-gray-400 duration-300 ease-in-out hover:bg-orange-500 px-4 py-2 rounded">Admin</a>
        <% } %>
        <a href="/logout" class="text-white text-sm  bg-gray-400 duration-300 ease-in-out hover:bg-orange-500 px-4 py-2 rounded">Logout</a>
      </div>
    </div>
  </nav>

<!-- Main Section -->
<section class="max-w-screen-xl mx-auto px-12 py-8 flex flex-row justify-between items-center text-left space-x-24">
    
  <!-- Left Section -->
  <div class="w-1/3 flex flex-col justify-center">
      <% if (user.name) { %>
          <h1 class="text-4xl text-white font-semibold mb-4">
              Hello <span class="text-emerald-400"><%= user.name %></span>!
          </h1>
      <% } %>

      <h1 class="text-2xl font-semibold text-white">Welcome to Sentinal_Eye</h1> 
      <p class="text-lg text-gray-300 mt-2">ParkWise: AI-Driven Automated Parking & Plate Scanner</p>

      <a href="/plate" class="text-xl mt-6 px-6 py-3 bg-blue-400 text-white duration-300 ease-in-out hover:bg-yellow-500 px-4 py-2 rounded">Connect to Extractor</a>
     
  </div>

  <!-- Form Section for Translation -->
  <main class="w-2/3 min-h-[90vh] bg-gray-900 flex flex-col items-center justify-center p-6 rounded-lg">
        <div class="flex space-x-4 mb-4">
        <button id="startLive" class="px-4 py-2 bg-blue-500 hover:bg-blue-600 rounded">Start Live Camera</button>
        <input type="file" id="uploadVideo" accept="video/*" class="hidden">
        <label for="uploadVideo" class="px-4 py-2 bg-green-500 hover:bg-green-600 rounded cursor-pointer">Upload Video</label>
        <button id="stopVideo" class="px-4 py-2 bg-red-500 hover:bg-red-600 rounded hidden">Stop Video</button>
    </div>

    <div class="relative">
        <video id="video" autoplay muted class="rounded shadow-lg hidden"></video>
        <canvas id="canvas" class="absolute top-0 left-0 hidden"></canvas>
    </div>
  </main>

</section>


<script>
  let video = document.getElementById('video');
  let canvas = document.getElementById('canvas');
  let ctx = canvas.getContext('2d');
  let startLiveBtn = document.getElementById('startLive');
  let uploadVideoInput = document.getElementById('uploadVideo');
  let stopVideoBtn = document.getElementById('stopVideo');

  let stream = null;
  let faceCascade = null;
  let detecting = false;
  let opencvLoaded = false;

  function onOpenCVLoaded() {
      console.log("OpenCV Loaded!");
      opencvLoaded = true;
      loadHaarCascade();
  }

  async function loadHaarCascade() {
      try {
          console.log("Loading Haar Cascade...");
          let response = await fetch("haarcascade_frontalface_default.xml");
          let data = await response.arrayBuffer();
          cv.FS_createDataFile("/", "haarcascade_frontalface_default.xml", new Uint8Array(data), true, false, false);
          faceCascade = new cv.CascadeClassifier();
          faceCascade.load("haarcascade_frontalface_default.xml");
          console.log("Haar Cascade Loaded Successfully!");
      } catch (error) {
          console.error("Error loading Haar Cascade:", error);
      }
  }

  function detectFaces() {
      if (!faceCascade) {
          console.error("Face cascade not loaded correctly.");
          return;
      }
      console.log("Starting face detection...");
      detecting = true;

      function processFrame() {
          if (!detecting) return;
          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
          let mat = cv.imread(canvas);
          let gray = new cv.Mat();
          cv.cvtColor(mat, gray, cv.COLOR_RGBA2GRAY, 0);
          let faces = new cv.RectVector();
          let size = new cv.Size(30, 30);
          faceCascade.detectMultiScale(gray, faces, 1.1, 4, 0, size, size);

          ctx.strokeStyle = "red";
          ctx.lineWidth = 3;
          for (let i = 0; i < faces.size(); ++i) {
              let face = faces.get(i);
              ctx.strokeRect(face.x, face.y, face.width, face.height);
              console.log("Face Detected at:", face.x, face.y, face.width, face.height);
          }
          mat.delete();
          gray.delete();
          faces.delete();
          requestAnimationFrame(processFrame);
      }
      requestAnimationFrame(processFrame);
  }

  startLiveBtn.addEventListener('click', async () => {
      if (stream) return;
      try {
          console.log("Starting live camera...");
          stream = await navigator.mediaDevices.getUserMedia({ video: {} });
          video.srcObject = stream;
          video.classList.remove('hidden');
          canvas.classList.remove('hidden');
          stopVideoBtn.classList.remove('hidden');
          video.onloadedmetadata = () => {
              canvas.width = video.videoWidth;
              canvas.height = video.videoHeight;
          };
          detectFaces();
      } catch (error) {
          console.error("Error accessing the camera: ", error);
      }
  });

  uploadVideoInput.addEventListener('change', (event) => {
      const file = event.target.files[0];
      if (!file) return;
      console.log("Uploading video...");
      const url = URL.createObjectURL(file);
      video.src = url;
      video.classList.remove('hidden');
      canvas.classList.remove('hidden');
      stopVideoBtn.classList.remove('hidden');
      video.onloadeddata = () => {
          canvas.width = video.videoWidth;
          canvas.height = video.videoHeight;
          detectFaces();
      };
  });

  stopVideoBtn.addEventListener('click', () => {
      console.log("Stopping video...");
      if (stream) {
          stream.getTracks().forEach(track => track.stop());
          stream = null;
      }
      video.srcObject = null;
      video.pause();
      video.classList.add('hidden');
      canvas.classList.add('hidden');
      stopVideoBtn.classList.add('hidden');
      detecting = false;
  });
</script>

</body>
</html>